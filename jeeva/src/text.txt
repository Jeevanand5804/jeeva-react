import React from "react";
import { useState, useEffect } from "react";
import {
  Grid,
  Typography,
  TextField,
  Button,
  Checkbox,
  Box,
  Card,
  FormControlLabel,
  CardContent,
  Dialog,
  DialogContent,
  DialogTitle,
  IconButton,
  DialogActions,
} from "@mui/material";
import axios from "axios";
import CloseIcon from "@mui/icons-material/Close";
import DeleteRoundedIcon from "@mui/icons-material/DeleteRounded";
import ModeEditIcon from "@mui/icons-material/ModeEdit";

function Courses() {
  const [name, setName] = useState("");
  const [course, setCourse] = useState([]);
  const [isActive, setIsActive] = useState(false);
  const [updatecourse, setUpdatecourse] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [selectedCourse, setSelectedCourse] = useState(null);

  const handleSubmit = (e) => {
    e.preventDefault();

    axios
      .post("http://localhost:3000/coursespractice", {
        name,
        status: isActive,
      })
      .then((response) => {
        fetchCourse();
        setIsActive(false);
        setName("");
      });
  };

  const handleDeleteCourse = (course) => {
    setSelectedCourse(course);
    setDeleteDialogOpen(true);
  };

  const handleDeleteConfirm = async () => {
    const deletecourse = await axios.delete(
      `http://localhost:3000/deletecourse/${selectedCourse._id}`
    );
    if (deletecourse.data.acknowledged) {
      fetchCourse();
    } else {
      console.log("error while deleting course");
    }
    setDeleteDialogOpen(false);
  };

  const fetchCourse = async () => {
    var response = await axios.get("http://localhost:3000/getAllcourses");
    var filteredcourse = response.data.filter(
      (courses) => courses.name && courses.name.trim() !== ""
    );

    setCourse(filteredcourse);
  };

  const handleUpdate = async () => {
    await axios.put("http://localhost:3000/updatecourse", {
      ...updatecourse,
    });
    fetchCourse();
    setOpenDialog(false);
    setUpdatecourse(null);
  };

  const handleOpenDialog = (course) => {
    setUpdatecourse(course);
    setOpenDialog(true);
  };

  useEffect(() => {
    fetchCourse();
  }, []);

  return (
    <div>
      <Grid container spacing={2}>
        <Grid item xs={6}>
          <Box
            elevation={3}
            sx={{
              height: "100v",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              boxShadow: "2px 2px 10px rgba(0, 0, 0, 0.2)",
              padding: "16px",
              marginBottom: "20px",
            }}
          >
            <Box>
              <Typography
                variant="h5"
                component="div"
                align="center"
                gutterBottom
              >
                Courses
              </Typography>
              <form onSubmit={handleSubmit}>
                <TextField
                  label="Name"
                  fullWidth
                  margin="normal"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />

                <FormControlLabel
                  control={
                    <Checkbox
                      checked={isActive}
                      onChange={(e) => setIsActive(e.target.checked)}
                    />
                  }
                  label="Active"
                />

                <Button
                  fullWidth
                  variant="contained"
                  color="primary"
                  type="submit"
                >
                  Submit
                </Button>
              </form>
            </Box>
          </Box>
        </Grid>

        <Grid item xs={6}>
          <Grid container spacing={2}>
            {course.map((course, index) => (
              <Grid item xs={12} md={4} key={index}>
                <Card
                  sx={{
                    marginTop: 5,
                    backgroundColor: course.status ? "green" : "red",
                  }}
                >
                  <CardContent>
                    <DeleteRoundedIcon
                      sx={{
                        cursor: "pointer",
                        float: "right",
                      }}
                      onClick={() => handleDeleteCourse(course)}
                    />
                    <ModeEditIcon
                      sx={{ cursor: "pointer", float: "right" }}
                      onClick={() => handleOpenDialog(course)}
                    />

                    <Typography variant="h5" component="div">
                      {course.name}
                    </Typography>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Grid>
      </Grid>
      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>
          Edit Course
          <IconButton
            aria-label="close"
            onClick={() => setOpenDialog(false)}
            sx={{
              position: "absolute",
              right: 8,
              top: 8,
              color: (theme) => theme.palette.grey[500],
            }}
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent>
          <TextField
            label="Title"
            fullWidth
            margin="normal"
            value={updatecourse ? updatecourse.name : ""}
            onChange={(e) =>
              setUpdatecourse({ ...updatecourse, name: e.target.value })
            }
          />
          <Button
            variant="outlined"
            color="primary"
            onClick={() => setOpenDialog(false)}
          >
            Close
          </Button>
          <Button variant="contained" color="primary" onClick={handleUpdate}>
            Update
          </Button>
        </DialogContent>
      </Dialog>

      <Dialog
        open={deleteDialogOpen}
        onClose={() => setDeleteDialogOpen(false)}
      >
        <DialogTitle>Delete Course</DialogTitle>
        <DialogContent>
          Are you sure you want to delete the course?
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteDialogOpen(false)} color="primary">
            No
          </Button>
          <Button onClick={handleDeleteConfirm} color="primary">
            Yes
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}

export default Courses;